{"ast":null,"code":"var _jsxFileName = \"/home/bartekj/Projects/diet-planner/src/components/UserPanel.js\";\nimport React from 'react';\nimport Select from 'react-select';\nimport data from '../macros';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: 'chocolate',\n  label: 'Chocolate'\n}, {\n  value: 'strawberry',\n  label: 'Strawberry'\n}, {\n  value: 'vanilla',\n  label: 'Vanilla'\n}];\nclass UserPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addObjectToArray = e => {\n      e.preventDefault();\n      let proteinPerFood = this.state.weight * this.state.protein / 100;\n      this.setState({\n        foods: [...this.state.foods, {\n          name: this.state.name,\n          protein: proteinPerFood\n        }],\n        name: '',\n        protein: 0,\n        weight: 0,\n        total: this.state.total + proteinPerFood\n      });\n    };\n    this.handleKeyDown = event => {\n      if (event.key === 'Enter') {\n        console.log('do validate');\n      }\n    };\n    this.state = {\n      weight: 0,\n      protein: 0,\n      total: 0,\n      name: '',\n      foods: [],\n      value: null\n    };\n    this.handleWeightChange = this.handleWeightChange.bind(this);\n    this.handleProteinChange = this.handleProteinChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n  handleWeightChange(e) {\n    this.setState({\n      weight: e.target.value\n    });\n  }\n  handleProteinChange(e) {\n    this.setState({\n      protein: e.target.value\n    });\n  }\n  handleNameChange(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n  handleValueChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Total Protein \", this.state.total, \"g\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"foods\",\n        options: data,\n        value: value,\n        onChange: this.handleValueChange,\n        getOptionLabel: option => option.name,\n        getOptionValue: option => option.name // It should be unique value in the options. E.g. ID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"food:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"name\",\n        value: this.state.name,\n        onChange: this.handleNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"weight (grams):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"weight\",\n        value: this.state.weight,\n        onChange: this.handleWeightChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"protein/100g:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"protein\",\n        value: this.state.protein,\n        onChange: this.handleProteinChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), this.state.foods.map(food => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"food: \", food.name, \" protein: \", food.protein, \"g\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, food.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-button\",\n        onClick: this.addObjectToArray,\n        children: \"Add food\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default UserPanel;","map":{"version":3,"names":["React","Select","data","options","value","label","UserPanel","Component","constructor","props","addObjectToArray","e","preventDefault","proteinPerFood","state","weight","protein","setState","foods","name","total","handleKeyDown","event","key","console","log","handleWeightChange","bind","handleProteinChange","handleNameChange","handleValueChange","target","render","option","map","food","id"],"sources":["/home/bartekj/Projects/diet-planner/src/components/UserPanel.js"],"sourcesContent":["import React from 'react';\nimport Select from 'react-select'\nimport data from '../macros'\n\n\nconst options = [\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'vanilla', label: 'Vanilla' }\n]\n\nclass UserPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            weight: 0,\n            protein: 0,\n            total: 0,\n            name: '',\n            foods: [],\n            value: null\n        };\n        this.handleWeightChange = this.handleWeightChange.bind(this);\n        this.handleProteinChange = this.handleProteinChange.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleValueChange = this.handleValueChange.bind(this);\n\n    }\n\n\n    addObjectToArray = e => {\n        e.preventDefault();\n        let proteinPerFood = (this.state.weight * this.state.protein) / 100\n        this.setState({\n            foods: [\n                ...this.state.foods,\n                { name: this.state.name, protein: proteinPerFood }\n            ],\n            name: '',\n            protein: 0,\n            weight: 0,\n            total: this.state.total + proteinPerFood\n        })\n    };\n\n    handleWeightChange(e) {\n        this.setState({\n            weight: e.target.value\n        });\n    }\n\n    handleProteinChange(e) {\n        this.setState({\n            protein: e.target.value\n        });\n    }\n\n    handleNameChange(e) {\n        this.setState({\n            name: e.target.value\n        })\n    }\n\n    handleValueChange(e) {\n        this.setState({\n            value: e.target.value\n        })\n    }\n\n    handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            console.log('do validate')\n        }\n    }\n\n\n    render() {\n        return <>\n            <h2>Total Protein {this.state.total}g</h2>\n            {/* <Select options={data} /> */}\n            <Select\n                name=\"foods\"\n                options={data}\n                value={value}\n                onChange={this.handleValueChange}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.name} // It should be unique value in the options. E.g. ID\n            />\n            <label>food:</label>\n            <input\n                name=\"name\"\n                value={this.state.name}\n                onChange={this.handleNameChange} />\n            <label>weight (grams):</label>\n            <input\n                name=\"weight\"\n                value={this.state.weight}\n                onChange={this.handleWeightChange} />\n            <label>protein/100g:</label>\n            <input\n                name=\"protein\"\n                value={this.state.protein}\n                onChange={this.handleProteinChange} />\n            {this.state.foods.map(food => {\n                return (\n                    <div key={food.id}>\n                        <p>food: {food.name} protein: {food.protein}g</p>\n                        <hr />\n                    </div>\n                );\n            })}\n\n            <button className=\"add-button\" onClick={this.addObjectToArray}>\n                Add food\n            </button>\n        </>\n    }\n}\n\nexport default UserPanel;\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}